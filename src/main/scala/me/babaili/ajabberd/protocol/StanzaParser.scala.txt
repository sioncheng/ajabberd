package me.babaili.ajabberd.protocol

import java.io.{ByteArrayInputStream, PipedInputStream, PipedOutputStream}

import org.xmlpull.v1.{XmlPullParser, XmlPullParserException, XmlPullParserFactory}

import scala.collection.mutable

/**
  * Created by chengyongqiao on 11/01/2017.
  */
class StanzaParser {

    val xmlPullParserFactory = XmlPullParserFactory.newInstance()

    val xmlPullParser = xmlPullParserFactory.newPullParser()

    val readStream = new PipedInputStream()

    val appendStream = new PipedOutputStream()


    readStream.connect(appendStream)
    xmlPullParser.setInput(this.readStream, "UTF-8")


    def append(s: String): Unit = {
        this.appendStream.write(s.getBytes());
    }

    def query(): Option[Stanza] = {
        var result: Option[Stanza] = None
        var eventType = this.xmlPullParser.getEventType()
        var shouldWhile = true // Boolean = eventType != XmlPullParser.END_DOCUMENT
        while (shouldWhile == true) {
            eventType = this.xmlPullParser.next()
            val nodeName = this.xmlPullParser.getName()
            eventType match {
                case XmlPullParser.START_DOCUMENT =>
                    println("namespace prefix", this.xmlPullParser.getNamespacePrefix(0))
                    println("prefix", this.xmlPullParser.getPrefix())
                    println("text", this.xmlPullParser.getText())
                /*if (nodeName.equalsIgnoreCase(Stanza.stream)) {
                    result = Some(new Stream())
                    shouldBreak = true
                } else {
                    println("unknown node name ", nodeName)
                }
                shouldWhile = false
                result = Some(new NilStanza())
                */
                case XmlPullParser.START_TAG =>
                    nodeName match {
                        case Stanza.stream =>
                            val to = this.xmlPullParser.getAttributeValue(null, "to")
                            result = Some(new Stream(to))
                            shouldWhile = false
                        case _ => println("unknown node name ", nodeName)
                    }
                case XmlPullParser.END_TAG =>
                    shouldWhile = false
                case XmlPullParser.END_DOCUMENT =>
                    shouldWhile = false
                case _ => println("unexpected type", eventType)
            }
        }

        result
    }

    def queryHalfCommonStanza(): Option[CommonStanza] = {
        queryCommonStanza("", true)
    }

    def queryFullCommonStanza(): Option[CommonStanza] = {
        queryCommonStanza("", false)
    }

    private def queryCommonStanza(firstStartNode:String, half: Boolean): Option[CommonStanza] = {
        var result: Option[CommonStanza] = None
        var root: CommonStanza = null
        var parent: CommonStanza = null
        var child: CommonStanza = null
        var eventType = this.xmlPullParser.getEventType()
        var shouldWhile = true // Boolean = eventType != XmlPullParser.END_DOCUMENT
        var steps: Int = 1
        while (shouldWhile == true) {
            eventType = this.xmlPullParser.next()
            val nodeName = this.xmlPullParser.getName()
            eventType match {
                case XmlPullParser.START_DOCUMENT =>
                    println("namespace prefix", this.xmlPullParser.getNamespacePrefix(0))
                    println("prefix", this.xmlPullParser.getPrefix())
                    println("text", this.xmlPullParser.getText())
                case XmlPullParser.START_TAG =>
                    if (root == null) {
                        println("first start node name", nodeName)
                        val attributeCount = this.xmlPullParser.getAttributeCount()
                        var attributes: Option[scala.collection.immutable.HashMap[String, String]] = None
                        if (attributeCount > 0) {
                            var cnt: Int = 0
                            var attributesMap: scala.collection.immutable.HashMap[String, String] =
                                new scala.collection.immutable.HashMap[String, String]()
                            while (cnt < attributeCount) {
                                val attributeName = this.xmlPullParser.getAttributeName(cnt)
                                val attributeValue = this.xmlPullParser.getAttributeValue(cnt)
                                attributesMap = attributesMap.+((attributeName, attributeValue))
                                cnt += 1
                            }
                            attributes = Some(attributesMap)
                        }
                        val currentNode = CommonStanza(nodeName, attributes, None)
                        parent = currentNode
                        root = currentNode
                        child = currentNode
                        //result = Some(currentNode)
                        if (half == true) shouldWhile = false
                    } else {
                        println("nested start node name", nodeName)

                        val attributeCount = this.xmlPullParser.getAttributeCount()
                        var attributes: Option[scala.collection.immutable.HashMap[String, String]] = None
                        if (attributeCount > 0) {
                            var cnt: Int = 0
                            var attributesMap: scala.collection.immutable.HashMap[String, String] =
                                new scala.collection.immutable.HashMap[String, String]()
                            while (cnt < attributeCount) {
                                val attributeName = this.xmlPullParser.getAttributeName(cnt)
                                val attributeValue = this.xmlPullParser.getAttributeValue(cnt)
                                attributesMap = attributesMap.+((attributeName, attributeValue))
                                cnt += 1
                            }
                            attributes = Some(attributesMap)
                        }
                        val currentNode = CommonStanza(nodeName, attributes, None)


                            val newChildren = parent.children.getOrElse(List.empty) :+ currentNode
                            parent = CommonStanza(parent.tag, parent.attributes, Some(newChildren))




                        steps += 1
                        println("start tag, steps", nodeName, steps)
                    }
                case XmlPullParser.END_TAG =>
                    steps -= 1
                    println("end tag, steps", nodeName, steps)
                    if (steps == 0) {
                        shouldWhile = false
                    }
                case XmlPullParser.END_DOCUMENT =>
                    println("end document", nodeName)
                    shouldWhile = false
                case _ => println("unexpected type", eventType)
            }
        }

        if (parent != null) {
            result = Some(parent)
        }


        result
    }
}